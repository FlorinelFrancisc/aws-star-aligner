name: deploying staging

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: read

env:
  STAGING_REGION: eu-north-1
  ARTIFACT_BUCKET: star-aligner-files-${AWS::AccountId}

jobs:
  format-checker:
    name: Code Format Checker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install Python and Node.js Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip nodejs npm
          pip3 install ruff==0.0.285 black==23.3.0
          npm install -g prettier@3.0.2
      - name: Run Ruff Linter
        run: ruff check .
      - name: Run Black Formatter
        run: black --check .
      - name: Prettier YAML Formatter
        run: prettier "./**/*.yaml" --check || true
      - name: Prettier JSON Formatter
        run: prettier "./**/*.json" --check || true

  branch-analysis:
    name: Branch Analysis
    runs-on: ubuntu-latest
    outputs:
      dryrun-label: ${{ steps.analysis.outputs.dryrun-label }}
      dryrun-param: ${{ steps.analysis.outputs.dryrun-param }}
    steps:
      - name: Analysis
        id: analysis
        run: |
          echo "Github reference branch = ${{ github.ref }}"
          if [ "${{ github.ref }}" != "refs/heads/staging" ] && [ "${{ github.event_name }}" != "workflow_dispatch" ]; then echo "dryrun-label=Dry Run"; fi >> $GITHUB_OUTPUT
          if [ "${{ github.ref }}" != "refs/heads/staging" ] && [ "${{ github.event_name }}" != "workflow_dispatch" ]; then echo "dryrun-param=--no-execute-changeset"; fi >> $GITHUB_OUTPUT

  dry-run:
    name: Dry Run Deployment
    runs-on: ubuntu-latest
    environment: Staging
    needs: [format-checker, branch-analysis]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.STAGING_REGION }}
      - name: Debug AWS Credentials
        run: |
          echo "Checking AWS credentials..."
          echo "key id is:" + ${{ vars.AWS_ACCESS_KEY_ID }}
          aws sts get-caller-identity || echo "Failed to authenticate with AWS"
      - name: Validate SAM Templates
        run: sam validate
      - name: Build SAM Application
        run: sam build
      - name: Package Application
        run: |
          sam package \
            --output-template-file packaged.yaml \
            --s3-bucket ${{ env.ARTIFACT_BUCKET }}
      - name: Dry Run Deploy
        run: |
          sam deploy \
            --template-file packaged.yaml \
            --stack-name star-aligner \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            ${{ needs.branch-analysis.outputs.dryrun-param }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: Staging
    needs: dry-run
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.STAGING_REGION }}
      - name: Build SAM Application
        run: sam build
      - name: Package Application
        run: |
          sam package \
            --output-template-file packaged.yaml \
            --s3-bucket ${{ env.ARTIFACT_BUCKET }}
      - name: Deploy Application
        run: |
          sam deploy \
            --template-file packaged.yaml \
            --stack-name star-aligner \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build Docker Image
        run: |
          docker build -t my-aws-cli-image .
          docker tag my-aws-cli-image:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.STAGING_REGION }}.amazonaws.com/my-aws-cli-image:latest
      - name: Push Docker Image to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.STAGING_REGION }}.amazonaws.com/my-aws-cli-image:latest
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster my-cluster \
            --service my-service \
            --force-new-deployment
